  //creating a copy
        //TO BUILD THE QUERY
        //1) Filtering process
        // const queryObj = { ...req.query };
        // const excludedFields = ['page', 'sort', 'limit', 'fields'];
        // excludedFields.forEach(el => delete queryObj[el]);


        // //1b) Advanced filtering
        // let queryStr = JSON.stringify(queryObj);
        // queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`);
        // console.log(JSON.parse(queryStr));

        // let query = Tour.find(JSON.parse(queryStr));


        //2) Sorting
        // if (req.query.sort) {
        //     const sortBy = req.query.sort.split(",").join(" ");
        //     query = query.sort(sortBy)
        // } else {
        //     query = query.sort('-createdAt');
        // };


        // //3) field limiting
        // if (req.query.fields) {
        //     const fields = req.query.fields.split(",").join(" ");
        //     query = query.select(fields)
        // } else {
        //     query = query.select('-__v');
        // };


        //4) Pagination
        // //get the page
        // const page = req.query.page * 1 || 1;
        // const limit = req.query.limit * 1 || 100;
        // const skip = (page - 1) * limit;
        // query = query.skip(skip).limit(limit);

        // if (req.query.page) {
        //     const numTours = await Tour.countDocuments();
        //     if (skip >= numTours) throw new Error("This page doesn't exist")
        // };


Type of mongoose Middleware
1. document e.g
 //Run before save document
 tourSchema.pre('save', function(next){
  next();
});

//Run after save document
tourSchema.post('save', function(doc, next){
next();
});

2. query e.g
  //Run before find query
  tourSchema.pre('/^find/', function(next){
   next();
});

//Run after find query
tourSchema.post('/^find/', function(docs, next){
next();
});

3. aggregate e.g
